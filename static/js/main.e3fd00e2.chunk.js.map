{"version":3,"sources":["App.js","useData.js","index.js"],"names":["projection","d3","scale","center","rotate","translate","width","height","initialScale","path","App","data","useState","setData","console","log","useEffect","json","then","useData","svgRef","useRef","gRef","svg","select","current","globe","paths","selectAll","call","on","event","k","dx","dy","attr","zoom","transform","features","join","ref","fill","stroke","strokeWidth","cx","cy","r","className","map","feature","key","properties","name","ReactDOM","render","document","getElementById"],"mappings":"mQAmBIA,G,MAAaC,MACdC,MAAM,KACNC,OAAO,CAAC,EAAG,IACXC,OAAO,CAAC,GAAG,KACXC,UAAU,CAACC,IAAWC,OAGnBC,EAAeR,EAAWE,QAC5BO,EAAOR,MAAaD,WAAWA,GAKtBU,EAAM,WAEjB,IAAMC,EC3Be,WAAO,IAAD,EACHC,mBAAS,MADN,mBACpBD,EADoB,KACdE,EADc,KAW3B,OAPAC,QAAQC,IAAIJ,GACZK,qBAAU,WACRC,YARF,2GASKC,KAAKL,KAEP,IAEIF,EDgBMQ,GACPC,EAASC,iBAAO,MAChBC,EAAMD,iBAAO,MAsDnB,OAlDAL,qBAAU,WACR,GAAKL,EAAL,CAEA,IAAMY,EAAMC,YAAOJ,EAAOK,SAEpBC,GADIF,YAAOF,EAAKG,SACRF,EAAIC,OAAO,WAEnBG,EAAQJ,EAAIK,UAAU,QAE5BL,EACGM,KAAK5B,MAAU6B,GAAG,QAAQ,SAAAC,GACzB,IAAM3B,EAASJ,EAAWI,SACpB4B,EA3BM,GA2BYhC,EAAWE,QACnCF,EAAWI,OAAO,CAChBA,EAAO,GAAK2B,EAAME,GAAKD,EACvB5B,EAAO,GAAK2B,EAAMG,GAAKF,IAEzBvB,EAAOR,MAAaD,WAAWA,GAC/B2B,EAAMQ,KAAK,IAAK1B,OAEjBoB,KAAKO,cAAON,GAAG,QAAQ,SAAAC,GACnBA,EAAMM,UAAUL,EAAI,IACrBhC,EAAWE,MAAMM,EAAeuB,EAAMM,UAAUL,GAChDvB,EAAOR,MAAaD,WAAWA,GAE/B2B,EAAMQ,KAAK,IAAK1B,GAChBiB,EAAMS,KAAK,IAAKnC,EAAWE,UAG3B6B,EAAMM,UAAUL,EAAI,UAOzB,CAACrB,IAEJK,qBAAU,WACHL,GAEKa,YAAOF,EAAKG,SAErBG,UAAU,QACVjB,KAAKA,EAAK2B,UACVC,KAAK,QACLJ,KAAK,QAAS,WACdA,KAAK,IAAK1B,MAGRE,EAGH,yBAAK6B,IAAKpB,EAAQd,MAtFR,IAsFsBC,OArFrB,KAsFT,4BACEkC,KAAK,OACLC,OAAO,OACPC,YAAY,MACZC,GAAItC,IACJuC,GAAItC,IACJuC,EAAGtC,IAEL,uBAAGuC,UAAU,YAAYP,IAAKlB,GAE3BX,EAAK2B,SAASU,KAAI,SAACC,GAAD,OACjB,0BACEF,UAAU,UACVG,IAAKD,EAAQE,WAAWC,YAjBhB,4C,MErFpBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e3fd00e2.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { geoPath, geoNaturalEarth1, geoOrthographic, zoom, select } from 'd3';\n\nimport * as d3 from 'd3';\nimport { useData } from './useData';\n\n// Variables\nconst width = 900;\nconst height = 500;\n\n// Latitude and longitude to pixel coordinates\n// const projection = geoNaturalEarth1();\n// // Generate lines from pixel coordinates\n// const pathGenerator = geoPath(projection);\n// // Geometry object representing all meridians and parallels\n// const graticule = geoGraticule();\n\n\n\nlet projection = d3.geoOrthographic()\n  .scale(250)\n  .center([0, 0])\n  .rotate([0,-30])\n  .translate([width / 2, height / 2]);\n\nconst sensitivity = 75;\nconst initialScale = projection.scale()\nlet path = d3.geoPath().projection(projection)\n\n\n\n\nexport const App = () => {\n  // Fetch data using custom hook\n  const data = useData();\n  const svgRef = useRef(null);\n  const gRef= useRef(null);\n\n  \n\n  useEffect(() => {\n    if (!data) return;\n\n    const svg = select(svgRef.current);\n    const g = select(gRef.current);\n    const globe = svg.select('circle');\n\n    const paths = svg.selectAll('path');\n\n    svg\n      .call(d3.drag().on('drag', event => {\n        const rotate = projection.rotate()\n        const k = sensitivity / projection.scale()\n        projection.rotate([\n          rotate[0] + event.dx * k,\n          rotate[1] - event.dy * k\n        ])\n        path = d3.geoPath().projection(projection)\n        paths.attr(\"d\", path)\n      }))\n      .call(zoom().on('zoom', event => {\n        if(event.transform.k > 0.3) {\n          projection.scale(initialScale * event.transform.k)\n          path = d3.geoPath().projection(projection)\n          //svg.selectAll(\"path\")\n          paths.attr(\"d\", path)\n          globe.attr(\"r\", projection.scale())\n        }\n        else {\n          event.transform.k = 0.3\n        }\n      }))\n\n\n     \n\n  }, [data])\n\n  useEffect(() => {\n    if (!data) return;\n\n    const g = select(gRef.current);\n    g\n    .selectAll('path')\n    .data(data.features)\n    .join('path')\n    .attr('class', 'country')\n    .attr('d', path)\n  })\n\n  if (!data) return <pre>Loading...</pre>;\n\n  return (\n    <svg ref={svgRef} width={width} height={height}>\n      <circle\n        fill=\"#EEE\"\n        stroke=\"#000\"\n        strokeWidth=\"0.2\"\n        cx={width/2}\n        cy={height/2}\n        r={initialScale}\n      />\n      <g className=\"container\" ref={gRef}>\n        \n        {data.features.map((feature) => (\n          <path\n            className=\"country\"\n            key={feature.properties.name}\n          />\n        ))}\n        \n      </g>\n    </svg>\n  );\n};\n","import { useState, useEffect } from 'react';\r\nimport { json } from 'd3';\r\nimport { feature, mesh } from 'topojson';\r\n\r\nconst jsonUrl =\r\n  'https://raw.githubusercontent.com/michael-keith/mps_interests/master/view/js/charts/data/world_map.json';\r\n\r\nexport const useData = () => {\r\n  const [data, setData] = useState(null);\r\n\r\n \r\n  console.log(data);\r\n  useEffect(() => {\r\n    json(jsonUrl)\r\n      .then(setData);\r\n    \r\n  }, []);\r\n\r\n  return data;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}